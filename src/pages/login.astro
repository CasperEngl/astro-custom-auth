---
import { verify } from "argon2";
import { z } from "astro:content";
import { eq } from "drizzle-orm";
import { createForm, validateForm } from "simple:form";
import { scope } from "simple:scope";
import FormMessage from "~/components/form-message.astro";
import Layout from "~/components/layout.astro";
import { Alert, AlertDescription, AlertTitle } from "~/components/ui/alert";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { db } from "~/db";
import { Users } from "~/db/schema";
import { createSession, getSession } from "~/db/session";

const session = await getSession(Astro.request);

if (session) {
	return Astro.redirect("/");
}

const login = createForm({
	email: z.string().email(),
	password: z.string().min(6, "Password must be at least 6 characters"),
});

const result = await Astro.locals.form.getData(login);

let errorMessage = "";
let formData: FormData | null = null;

if (Astro.request.method === "POST") {
	formData = await Astro.request.formData();
	const parsed = await validateForm({
		formData,
		validator: login.validator,
	});

	if (parsed.data) {
		const [user] = await db
			.select()
			.from(Users)
			.where(eq(Users.email, parsed.data.email));

		if (!user) {
			errorMessage = "Invalid email or password";
		} else {
			const passwordMatch = await verify(user.password, parsed.data.password);

			if (!passwordMatch) {
				errorMessage = "Invalid email or password";
			} else {
				const cookies = await createSession(user.id);

				const response = Astro.redirect("/");

				response.headers.set("Set-Cookie", cookies.join("; "));

				return response;
			}
		}
	}
}

const autofocusElement = Astro.request.method === "POST" ? "password" : "email";
---

<Layout>
	<div class="container max-w-lg min-h-screen flex flex-col justify-center">
		<div transition:name="error">
			{
				errorMessage ? (
					<Alert variant="destructive" className="mb-4">
						<AlertTitle>Error</AlertTitle>
						<AlertDescription>{errorMessage}</AlertDescription>
					</Alert>
				) : null
			}
		</div>

		<h1 class="text-2xl" transition:name="title">Login</h1>

		<div class="pt-8">
			<form method="POST" class="space-y-4">
				<div class="grid gap-4 grid-cols-1" transition:name="form">
					<div transition:name="email">
						<Label htmlFor={scope("email")}>Email</Label>
						<Input
							id={scope("email")}
							placeholder="user@example.com"
							required
							{...login.inputProps.email}
							type="email"
							defaultValue={formData?.get("email")?.toString()}
							autoFocus={autofocusElement === "email" || undefined}
						/>
						<FormMessage message={result?.fieldErrors?.email} />
					</div>
					<div transition:name="password">
						<Label htmlFor={scope("password")}>Password</Label>
						<Input
							id={scope("password")}
							placeholder="••••••••"
							required
							{...login.inputProps.password}
							type="password"
							autoFocus={autofocusElement === "password" || undefined}
						/>
						<FormMessage message={result?.fieldErrors?.password} />
					</div>
				</div>

				<Button type="submit" transition:name="submit">Login</Button>

				<p class="pt-4" transition:name="register">
					Don't have an account? <a href="/register" class="text-blue-500">
						Register
					</a>
				</p>
			</form>
		</div>
	</div>
</Layout>
