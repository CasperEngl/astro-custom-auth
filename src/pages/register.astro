---
import { hash } from "argon2";
import { eq } from "drizzle-orm";
import { createForm, validateForm } from "simple:form";
import { scope } from "simple:scope";
import { z } from "zod";
import FormMessage from "~/components/form-message.astro";
import Layout from "~/components/layout.astro";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { db } from "~/db";
import { Users } from "~/db/schema";
import { createSession } from "~/db/session";

const register = createForm({
	email: z
		.string()
		.email()
		.refine(async (email) => {
			const [user] = await db
				.select({ id: Users.id })
				.from(Users)
				.where(eq(Users.email, email));

			return !user;
		}, "Email already exists"),
	password: z.string().min(6, "Password must be at least 6 characters"),
	firstName: z.string().min(2, "First name must be at least 2 characters"),
	lastName: z.string().min(2, "Last name must be at least 2 characters"),
});

const result = await Astro.locals.form.getData(register);

if (Astro.request.method === "POST") {
	const parsed = await validateForm({
		formData: await Astro.request.formData(),
		validator: register.validator,
	});

	if (parsed.data) {
		const hashedPassword = await hash(parsed.data.password);

		try {
			const [user] = await db
				.insert(Users)
				.values({
					email: parsed.data.email,
					password: hashedPassword,
					firstName: parsed.data.firstName,
					lastName: parsed.data.lastName,
				})
				.returning();

			if (!user) {
				throw new Error("User not found");
			}

			const session = await createSession(user.id);

			const response = Astro.redirect("/");

			response.headers.set("Set-Cookie", session.join("; "));

			return response;
		} catch (error) {
			return new Response("Something went wrong", {
				status: 500,
			});
		}
	}
}
---

<Layout>
	<div class="container max-w-lg min-h-screen flex flex-col justify-center">
		<h1 class="text-2xl">Register</h1>

		<div class="pt-8">
			<form method="POST" class="space-y-4">
				<div class="grid gap-4 grid-cols-2">
					<div>
						<Label htmlFor={scope("firstName")}>First Name</Label>
						<Input
							id={scope("firstName")}
							placeholder="John"
							required
							{...register.inputProps.firstName}
							autoComplete="given-name"
						/>
						<FormMessage message={result?.fieldErrors?.firstName} />
					</div>
					<div>
						<Label htmlFor={scope("lastName")}>Last Name</Label>
						<Input
							id={scope("lastName")}
							placeholder="Doe"
							required
							{...register.inputProps.lastName}
							autoComplete="family-name"
						/>
						<FormMessage message={result?.fieldErrors?.lastName} />
					</div>
					<div class="col-span-2">
						<Label htmlFor={scope("email")}>Email</Label>
						<Input
							id={scope("email")}
							placeholder="user@example.com"
							required
							{...register.inputProps.email}
							type="email"
							autoComplete="email"
						/>
						<FormMessage message={result?.fieldErrors?.email} />
					</div>
					<div class="col-span-2">
						<Label htmlFor={scope("password")}>Password</Label>
						<Input
							id={scope("password")}
							placeholder="••••••••"
							required
							{...register.inputProps.password}
							type="password"
							autoComplete="new-password"
						/>
						<FormMessage message={result?.fieldErrors?.password} />
					</div>
				</div>

				<Button type="submit">Register</Button>

				<p class="pt-4">
					Already have an account? <a href="/login" class="text-blue-500">
						Login
					</a>
				</p>
			</form>
		</div>
	</div>
</Layout>
